CREATE DATABASE "Wave's"
WITH 
OWNER = postgres
ENCODING = 'UTF8'
CONNECTION LIMIT = -1;


\c guru99


CREATE TABLE users (
u_id integer PRIMARY KEY,
name text NOT NULL,
mobile text NOT NULL,
wallet_id integer NOT NULL,
when_created timestamp without time zone NOT NULL-- more stuff :));

CREATE TABLE transfers (
transfer_id integer PRIMARY KEY,
u_id integer NOT NULL,
source_wallet_id integer NOT NULL,
dest_wallet_id integer NOT NULL,
send_amount_currency text NOT NULL,
send_amount_scalar numeric NOT NULL,
receive_amount_currency text NOT NULL,
receive_amount_scalar numeric NOT NULL,
kind text NOT NULL,
dest_mobile text,
dest_merchant_id integer,
QUERIES

QUESTION 1
SELECT count(u_id) 
FROM public.users;

QUESTION 2
SELECT count(u_id) 
FROM public.transfers 
WHERE send_amount_currency = 'CFA';

QUESTION 3
SELECT COUNT(DISTINCT u_id) 
FROM public.transfers 
WHERE send_amount_currency = 'CFA';

QUESTION 4
SELECT to_char(when_created, 'Month') AS month,
date_trunc('Month', when_created) AS time,
COUNT(atx_id)
FROM public.agent_transactions  
WHERE EXTRACT (YEAR FROM when_created) = 2018  
GROUP BY month, time
ORDER BY time;

QUESTION 5
SELECT agent_id, SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END) ASÂ withdrawal, 
SUM(CASE WHEN amount < 0 THEN -amount ELSE 0 END) AS deposit,
CASE WHEN ((SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END)) > ((SUM(CASE WHEN amount < 0 then amount ELSE 0 END))) * -1) THEN 'withdrawer'
ELSE 'depositer' END AS agent_status 
FROM public.agent_transactions 
WHERE when_created BETWEEN now() - interval '7 days' AND now()
GROUP BY agent_id;


QUESTION 6
// NUMBER OF TRANSFER
CREATE OR REPLACE VIEW atx_volume_city_summary AS 
SELECT 
city, 
COUNT(agent_transactions.agent_id)
FROM public.agent_transactions
INNER JOIN public.agents
ON agent_transactions.agent_id = agents.agent_id
WHERE agent_transactions.when_created BETWEEN now() - interval '7 days' AND now()
GROUP BY city;

// AMOUNT TRANSFERRED
CREATE OR REPLACE VIEW atx_volume_city_summary AS
SELECT city,
SUM(agent_transactions.amount)
FROM public.agent_transactions
INNER JOIN public.agents
ON agent_transactions.agent_id = agents.agent_id
WHERE agent_transactions.when_created BETWEEN now() - interval '7 days' AND now()
GROUP BY city;


QUESTION 7
// NUMBER OF TRANSFER
CREATE OR REPLACE VIEW atx_volume_city_summary AS 
SELECT
country,
city,
COUNT(agent_transactions.agent_id)
FROM public.agent_transactions
INNER JOIN public.agents
ON agent_transactions.agent_id = agents.agent_id
WHERE agent_transactions.when_created BETWEEN now() - interval '7 days' AND now()
GROUP BY country, city;

// AMOUNT TRANSFERRED
CREATE OR REPLACE VIEW atx_volume_city_summary AS 
SELECT 
country,
city,
SUM(agent_transactions.amount)
FROM public.agent_transactions
INNER JOIN public.agents
ON agent_transactions.agent_id = agents.agent_id
WHERE agent_transactions.when_created BETWEEN now() - interval '7 days' AND now()
GROUP BY country, city;

QUESTION 8
CREATE OR REPLACE VIEW send_volume_by_country_and_kind AS 
SELECT 
ledger_location,
kind,
SUM(send_amount_scalar)
FROM public.transfers
INNER JOIN public.wallets
ON source_wallet_id = wallet_id
WHERE transfers.when_created 
BETWEEN now() - interval '7 days' AND now()
GROUP BY ledger_location , kind;

QUESTION 9
CREATE OR REPLACE VIEW send_volume_by_country_and_kind_with_Count AS 
SELECT 
ledger_location,
kind,
SUM(send_amount_scalar),
COUNT(DISTINCT u_id) AS number_of_unique_senders,
COUNT(transfer_id) AS transaction_count
FROM public.transfers
INNER JOIN public.wallets
ON source_wallet_id = wallet_id
WHERE transfers.when_created 
BETWEEN now() - interval '7 days' AND now()
GROUP BY ledger_location , kind;

Question 10
SELECT source_wallet_id, SUM(send_amount_scalar)
FROM public.transfers
WHERE  transfers.send_amount_currency = 'CFA' AND transfers.when_created 
BETWEEN now() - interval '1 month' AND now()
GROUP BY source_wallet_id
HAVING SUM(send_amount_scalar) > 10000000
